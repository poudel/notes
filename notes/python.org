
* how to

* modules/packages
** [[https://pexpect.readthedocs.io/en/stable/][pexpect]]: to control other application, to test cli/shell output


* snippets/examples of

** call an async function without await

A function decorated with ~async~ decorator can be called without
~await~ keyword. It will run the async function in an event loop by
hook or crook.

#+BEGIN_SRC python
def async(func):
    @wraps(func)
    def wrapper(*args, **kwargs):

        try:
            loop = asyncio.get_event_loop()
        except RuntimeError:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)

        if loop.is_running():
            return func(*args, **kwargs)
        return loop.run_until_complete(
            func(*args, **kwargs)
        )

    return wrapper
#+END_SRC

** config class
#+BEGIN_SRC python
import os
from dataclasses import dataclass, fields


class ConfigMissing(Exception):

    def __init__(self, missing):
        self.missing = missing
        msg = f"Missing environment variables: {missing}"
        super().__init__(msg)


@dataclass
class Config:
    ENV_VAR_PREFIX = "PREFIX"

    OPT_REQUIRED: str
    OPT_DEFAULT: str

    @classmethod
    def from_environment(cls):
        defaults = {
            "OPT_DEFAULT": "default-value",
        }
        values = {}
        missing = []

        for field in fields(cls):
            default = defaults.get(field.name)

            env_var_name = f"{cls.ENV_VAR_PREFIX}_{field.name}"
            value = os.environ.get(env_var_name, default)

            if value is None:
                missing.append(env_var_name)
                continue

            values[field.name] = value

        if missing:
            raise ConfigMissing(missing)
        return cls(**values)

#+END_SRC
